name: Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Build, Push and Deploy to Minikube
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Configurar Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Paso 3: Login en Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Paso 4: Build y push de la imagen Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest

      # Paso 5: Instalar kubectl
      - name: Install kubectl
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.24.0/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      # Paso 6: Configuración de Minikube
      - name: Setup Minikube
        uses: manusa/actions-setup-minikube@v2.13.1
        with:
          minikube version: 'v1.30.0'
          kubernetes version: 'v1.24.0'
          github token: ${{ secrets.GITHUB_TOKEN }}

      # Paso 7: Esperar a que Minikube esté completamente inicializado
      - name: Wait for Minikube to start
        run: |
          echo "Esperando que Minikube esté listo..."
          minikube status || (echo "Minikube no está corriendo" && exit 1)
          kubectl cluster-info || (echo "El clúster de Kubernetes no está listo" && exit 1)

      # Paso 8: Esperar dinámicamente al nodo que esté listo
      - name: Wait for node to be ready
        run: |
          NODE_NAME=$(kubectl get nodes --no-headers -o custom-columns=NAME:.metadata.name)
          echo "Esperando que el nodo $NODE_NAME esté listo..."
          kubectl wait --for=condition=Ready node/$NODE_NAME --timeout=120s

      # Paso 9: Crear y exponer la app en Minikube
      - name: Deploy app to Minikube
        run: |
          kubectl create deployment my-app --image=${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          kubectl expose deployment my-app --type=NodePort --port=3000
          kubectl get all

      # Paso 10: Obtener logs de Minikube para depuración
      - name: Get Minikube logs
        run: |
          minikube logs

      - name: Probar app en Minikube
        run: |
          NODE_PORT=$(kubectl get svc my-app -o jsonpath='{.spec.ports[0].nodePort}')
          MINIKUBE_IP=$(minikube ip)
          echo "Accediendo a http://$MINIKUBE_IP:$NODE_PORT"
          curl -i http://$MINIKUBE_IP:$NODE_PORT || echo "No se pudo acceder a la app"
